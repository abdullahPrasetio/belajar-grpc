// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/user.proto

package user

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UserRegister with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserRegister) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserRegister with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserRegisterMultiError, or
// nil if none found.
func (m *UserRegister) ValidateAll() error {
	return m.validate(true)
}

func (m *UserRegister) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetFirstName()) < 2 {
		err := UserRegisterValidationError{
			field:  "FirstName",
			reason: "value length must be at least 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetLastName()) < 2 {
		err := UserRegisterValidationError{
			field:  "LastName",
			reason: "value length must be at least 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Email

	// no validation rules for Password

	// no validation rules for Phone

	if len(errors) > 0 {
		return UserRegisterMultiError(errors)
	}

	return nil
}

// UserRegisterMultiError is an error wrapping multiple validation errors
// returned by UserRegister.ValidateAll() if the designated constraints aren't met.
type UserRegisterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserRegisterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserRegisterMultiError) AllErrors() []error { return m }

// UserRegisterValidationError is the validation error returned by
// UserRegister.Validate if the designated constraints aren't met.
type UserRegisterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserRegisterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserRegisterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserRegisterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserRegisterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserRegisterValidationError) ErrorName() string { return "UserRegisterValidationError" }

// Error satisfies the builtin error interface
func (e UserRegisterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserRegister.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserRegisterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserRegisterValidationError{}

// Validate checks the field values on UserWithoutPassword with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserWithoutPassword) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserWithoutPassword with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserWithoutPasswordMultiError, or nil if none found.
func (m *UserWithoutPassword) ValidateAll() error {
	return m.validate(true)
}

func (m *UserWithoutPassword) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for FirstName

	// no validation rules for LastName

	// no validation rules for Email

	// no validation rules for Phone

	// no validation rules for Role

	if len(errors) > 0 {
		return UserWithoutPasswordMultiError(errors)
	}

	return nil
}

// UserWithoutPasswordMultiError is an error wrapping multiple validation
// errors returned by UserWithoutPassword.ValidateAll() if the designated
// constraints aren't met.
type UserWithoutPasswordMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserWithoutPasswordMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserWithoutPasswordMultiError) AllErrors() []error { return m }

// UserWithoutPasswordValidationError is the validation error returned by
// UserWithoutPassword.Validate if the designated constraints aren't met.
type UserWithoutPasswordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserWithoutPasswordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserWithoutPasswordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserWithoutPasswordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserWithoutPasswordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserWithoutPasswordValidationError) ErrorName() string {
	return "UserWithoutPasswordValidationError"
}

// Error satisfies the builtin error interface
func (e UserWithoutPasswordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserWithoutPassword.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserWithoutPasswordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserWithoutPasswordValidationError{}

// Validate checks the field values on UserId with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserId with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UserIdMultiError, or nil if none found.
func (m *UserId) ValidateAll() error {
	return m.validate(true)
}

func (m *UserId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return UserIdMultiError(errors)
	}

	return nil
}

// UserIdMultiError is an error wrapping multiple validation errors returned by
// UserId.ValidateAll() if the designated constraints aren't met.
type UserIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserIdMultiError) AllErrors() []error { return m }

// UserIdValidationError is the validation error returned by UserId.Validate if
// the designated constraints aren't met.
type UserIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserIdValidationError) ErrorName() string { return "UserIdValidationError" }

// Error satisfies the builtin error interface
func (e UserIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserIdValidationError{}

// Validate checks the field values on UserList with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserList with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserListMultiError, or nil
// if none found.
func (m *UserList) ValidateAll() error {
	return m.validate(true)
}

func (m *UserList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserListValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserListValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserListValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UserListMultiError(errors)
	}

	return nil
}

// UserListMultiError is an error wrapping multiple validation errors returned
// by UserList.ValidateAll() if the designated constraints aren't met.
type UserListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserListMultiError) AllErrors() []error { return m }

// UserListValidationError is the validation error returned by
// UserList.Validate if the designated constraints aren't met.
type UserListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserListValidationError) ErrorName() string { return "UserListValidationError" }

// Error satisfies the builtin error interface
func (e UserListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserListValidationError{}

// Validate checks the field values on ResponseUserData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ResponseUserData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResponseUserData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResponseUserDataMultiError, or nil if none found.
func (m *ResponseUserData) ValidateAll() error {
	return m.validate(true)
}

func (m *ResponseUserData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Message

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ResponseUserDataValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ResponseUserDataValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResponseUserDataValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ResponseUserDataMultiError(errors)
	}

	return nil
}

// ResponseUserDataMultiError is an error wrapping multiple validation errors
// returned by ResponseUserData.ValidateAll() if the designated constraints
// aren't met.
type ResponseUserDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResponseUserDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResponseUserDataMultiError) AllErrors() []error { return m }

// ResponseUserDataValidationError is the validation error returned by
// ResponseUserData.Validate if the designated constraints aren't met.
type ResponseUserDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResponseUserDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResponseUserDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResponseUserDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResponseUserDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResponseUserDataValidationError) ErrorName() string { return "ResponseUserDataValidationError" }

// Error satisfies the builtin error interface
func (e ResponseUserDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResponseUserData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResponseUserDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResponseUserDataValidationError{}
